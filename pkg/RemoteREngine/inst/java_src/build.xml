<?xml version="1.0"?>
<project name="remoterengine" default="all" basedir=".">

  <!--{{{ Copyright (c) 2009, Romain Francois <francoisromain@free.fr>
  
 :tabSize=2:indentSize=2:noTabs=false:folding=explicit:collapseFolds=1:
 This file is part of the RemoteREngine project
 
 The RemoteREngine project is free software: 
 you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 2 of the License, or
 (at your option) any later version.
 
 The RemoteREngine project is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with the RemoteREngine project. If not, see <http://www.gnu.org/licenses/>.
}}}-->

	<!--{{{ Properties -->
  <property file="./build.properties"/>
  
  <!--{{{ clean -->
	<target name="clean">
		<delete dir="build" />
		<delete dir="jars" />
	</target>

	<target name="init" depends="clean"> 	
		<mkdir dir="${build.dir}" />
		<mkdir dir="${common.dir}" />
		<mkdir dir="${server.dir}" />
		<mkdir dir="${client.dir}" />
		<mkdir dir="${stubs.dir}"/>
		<mkdir dir="${annotations.dir}"/>
		
		<mkdir dir="jars" />
		
		<mkdir dir="${javadoc.dir}" />
		<mkdir dir="${jar.dir}" />
	</target>
	<!-- }}} -->
	
	<!--{{{ common -->
	
	<path id="common_classpath">
		<pathelement location="lib/REngine.jar" />
	</path>
	
	<target name="common" depends="init">
		<javac srcdir="src/common" 
			destdir="${common.dir}"  
			includeJavaRuntime="yes"
			debug="${compiler.debug}"
      debuglevel="${compiler.debuglevel}"
      optimize="${compiler.optimize}"
      deprecation="${compiler.deprecation}"
      verbose="${compiler.verbose}"
      nowarn="${compiler.nowarn}"
      target="${compiler.target}"
      source="${compiler.source}" >
			<classpath refid="common_classpath" />
		</javac>	
		
	</target>
	
	<path id="javadoc_classpath">
		<pathelement location="${common.dir}" />
		<pathelement location="${client.dir}" />
		<pathelement location="${server.dir}" />
		<pathelement location="${rengine.jar}" />
		<pathelement location="${jriengine.jar}" />
	</path>
	
	
	<target name="javadoc"
		description="Compile the Javadoc API documentation to dist dir">
			
		<javadoc
		           destdir="${javadoc.dir}"
		           author="true"
		           version="true"
		           use="true"
				   private="true"
		           windowtitle="Remote R Server Javadoc"
				   classpathref="server_classpath">

		    <fileset dir="src" defaultexcludes="yes">	
		    	<exclude name="**/*.xml"/>
		    	<exclude name="**/*.properties"/>
		    	<exclude name="**/*.html"/>
		    	<exclude name="**/*.htm"/>
		    	<exclude name="**/test/*"/>
		    	<exclude name="**/*Test.java"/>
		    	<exclude name="**/All*Test.java"/>
		    	<exclude name="**/All*Tests.java"/>
		    </fileset>

		    <doctitle><![CDATA[<h1>Remote R Server Javadoc</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; 2009, Romain Francois <a href="mailto://francoisromain@free.fr">francoisromain@free.fr</a></i>]]></bottom>
		    <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
		    <link href="http://www.rforge.net/org/docs/" />
		    <link href="."/>
		</javadoc>
	</target>
	<!--}}}-->
	
	<!--{{{ server side -->
	<path id="server_classpath">
		<pathelement location="${common.dir}" />
		<pathelement location="${rengine.jar}" />
		<pathelement location="${jriengine.jar}" />
	</path>
	
	<target name="server" depends="common">
		<javac srcdir="src/server" 
			destdir="${server.dir}"  
			includeJavaRuntime="yes"
			debug="${compiler.debug}"
      debuglevel="${compiler.debuglevel}"
      optimize="${compiler.optimize}"
      deprecation="${compiler.deprecation}"
      verbose="${compiler.verbose}"
      nowarn="${compiler.nowarn}"
      target="${compiler.target}"
      source="${compiler.source}" >
			<classpath refid="server_classpath" />
		</javac>
	</target>
	<!--}}}-->
	
	<!--{{{ client side -->
	<path id="client_classpath">
		<pathelement location="${common.dir}" />
		<pathelement location="lib/REngine.jar" />
	</path>
	
	<target name="client" depends="common,server">
		<javac
				destdir="${client.dir}"  
				includeJavaRuntime="yes"
				debug="${compiler.debug}"
      	debuglevel="${compiler.debuglevel}"
      	optimize="${compiler.optimize}"
      	deprecation="${compiler.deprecation}"
      	verbose="${compiler.verbose}"
      	nowarn="${compiler.nowarn}"
      	target="${compiler.target}"
      	source="${compiler.source}">
      
      <src path="src/client" />
			<classpath refid="client_classpath" />
			<include name="**/*.java"/>
			<exclude name="**/test/*"/>

		</javac>
	</target>
	<!--}}}-->
	
	<!--{{{ client and server stubs -->
	<path id="stubs_classpath">
		<pathelement location="${server.dir}" />
		<pathelement location="${common.dir}" />
		<pathelement location="${client.dir}" />
		<pathelement location="${rengine.jar}" />
		<pathelement location="${jriengine.jar}" />
	</path>
	

	<target name="stubs" depends="common,client,server">
		<!-- server stubs -->
		<rmic base="${stubs.dir}" classpathref="stubs_classpath" 
			classname="org.rosuda.REngine.remote.server.files.RemoteFileInputStream_Server" />
		<rmic base="${stubs.dir}" classpathref="stubs_classpath"  
			classname="org.rosuda.REngine.remote.server.files.RemoteFileOutputStream_Server" />
		<!-- client stubs (callbacks) -->
		<rmic base="${stubs.dir}" classpathref="stubs_classpath"  
			classname="org.rosuda.REngine.remote.client.RemoteREngine" />
	</target>
	<!--}}}-->
	
	<!--{{{ annotation processing -->
	<path id="annotation_classpath">
		<pathelement location="lib/REngine.jar" />
		<pathelement location="${common.dir}" />
		<pathelement location="${server.dir}" />
		<pathelement location="${client.dir}" />
	</path>
	
	<target name="annotation-javac" depends="client">
		<javac srcdir="src/apt" 
			destdir="${annotations.dir}"  
			includeJavaRuntime="yes"
			debug="${compiler.debug}"
      debuglevel="${compiler.debuglevel}"
      optimize="${compiler.optimize}"
      deprecation="${compiler.deprecation}"
      verbose="${compiler.verbose}"
      nowarn="${compiler.nowarn}"
      target="${compiler.target}"
      source="${compiler.source}" >
			<classpath refid="annotation_classpath" />
		</javac>
	</target>
	
	<target name="annotation-jar" depends="annotation-javac">
		<jar jarfile="jars/RemoteREngine-annotationprocessor.jar">
			<fileset dir="${annotations.dir}" />
			<fileset dir="${common.dir}" />
			<fileset dir="${server.dir}" />
			<fileset dir="${client.dir}" />
		</jar>
	</target>
	
	<path id="annotation_factory_path">
		<pathelement location="jars/RemoteREngine-annotationprocessor.jar" />
	</path>
	
	<target name="annotation" depends="annotation-jar">
		<apt destdir="${annotations.dir}" debug="on" compile="false"
     		factory="com.addictedtor.remoterengine.apt.RemoteREngineAnnotationProcessorFactory" >
     <classpath refid="annotation_factory_path" />
     <src path="src/client" />
     <src path="src/server" />
     <src path="src/common" />
    </apt>
	</target>
	<!--}}}-->

	<!--{{{ copy the manifest file and licenses -->
	<target name="do.copy" description="copy the manifest file and licenses">
		<mkdir dir="${common.dir}/licenses"/>
		<copy todir="${common.dir}/licenses">
			<fileset dir="lib/licenses">
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="build">
			<fileset dir=".">
				<include name="MANIFEST.MF"/>
			</fileset>
		</copy>
		<tstamp>
		     <format property="date.year" pattern="d-MMMM-yyyy hh:mm aa" locale="en,UK" />
		</tstamp>
		<replace file="build/MANIFEST.MF">
			<replacefilter token="{project.name}" value="${project.name}" />
			<replacefilter token="{version}" value="${version}" />
			<replacefilter token="{build.time}" value="${date.year}" />
			<replacefilter token="{build.user}" value="${user.name}" />
			<replacefilter token="{build.os}" value="${os.name}-${os.version}" />
			<replacefilter token="{vendor}" value="${vendor}" />
		</replace>
	</target>
	<!--}}}-->

	<!--{{{ creating the jar -->
	<target name="makejars" depends="stubs,annotation,do.copy">
		<!-- client jar -->
		<unjar src="lib/REngine.jar"   	dest="${client.dir}" />
		<jar jarfile="${jar.dir}/RemoteREngine-client.jar" manifest="build/MANIFEST.MF">
			<fileset dir="${client.dir}" />
			<fileset dir="${common.dir}" />
			<fileset dir="${stubs.dir}" />
			<fileset file="build/services.xml" />
		</jar>
		
		<!-- server jar -->
		<unjar src="${jriengine.jar}" dest="${server.dir}" />
		<unjar src="${rengine.jar}"   dest="${server.dir}" />
		
		<jar jarfile="${jar.dir}/RemoteREngine-server.jar" manifest="build/MANIFEST.MF">
			<fileset dir="${server.dir}" />
			<fileset dir="${common.dir}" />
			<fileset dir="${stubs.dir}" />
			<fileset file="build/services.xml" />
		</jar>

	</target>
	<!--}}}-->

<target name="all" depends="javadoc,makejars" />

</project>
